
/*
 * 
 */

package it.gestpay.wscryptdecrypt.model;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.2.3
 * Wed Mar 15 16:31:23 CET 2017
 * Generated source version: 2.2.3
 * 
 */


@WebServiceClient(name = "WSCryptDecrypt", 
                  wsdlLocation = "https://testecomm.sella.it/gestpay/GestPayWS/WsCryptDecrypt.asmx?wsdl",
                  targetNamespace = "https://ecomm.sella.it/") 
public class WSCryptDecrypt extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("https://ecomm.sella.it/", "WSCryptDecrypt");
    public final static QName WSCryptDecryptSoap12 = new QName("https://ecomm.sella.it/", "WSCryptDecryptSoap12");
    public final static QName WSCryptDecryptSoap = new QName("https://ecomm.sella.it/", "WSCryptDecryptSoap");
    static {
        URL url = null;
        try {
            url = new URL("https://testecomm.sella.it/gestpay/GestPayWS/WsCryptDecrypt.asmx?wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from https://testecomm.sella.it/gestpay/GestPayWS/WsCryptDecrypt.asmx?wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public WSCryptDecrypt(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WSCryptDecrypt(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WSCryptDecrypt() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     * 
     * @return
     *     returns WSCryptDecryptSoap
     */
    @WebEndpoint(name = "WSCryptDecryptSoap12")
    public WSCryptDecryptSoap getWSCryptDecryptSoap12() {
        return super.getPort(WSCryptDecryptSoap12, WSCryptDecryptSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSCryptDecryptSoap
     */
    @WebEndpoint(name = "WSCryptDecryptSoap12")
    public WSCryptDecryptSoap getWSCryptDecryptSoap12(WebServiceFeature... features) {
        return super.getPort(WSCryptDecryptSoap12, WSCryptDecryptSoap.class, features);
    }
    /**
     * 
     * @return
     *     returns WSCryptDecryptSoap
     */
    @WebEndpoint(name = "WSCryptDecryptSoap")
    public WSCryptDecryptSoap getWSCryptDecryptSoap() {
        return super.getPort(WSCryptDecryptSoap, WSCryptDecryptSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSCryptDecryptSoap
     */
    @WebEndpoint(name = "WSCryptDecryptSoap")
    public WSCryptDecryptSoap getWSCryptDecryptSoap(WebServiceFeature... features) {
        return super.getPort(WSCryptDecryptSoap, WSCryptDecryptSoap.class, features);
    }

}
